# agents/memory_agent.py

from agents.base_agent import BaseAgent
from aiogram.types import Message
import logging

class MemoryAgent(BaseAgent):
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –±–æ—Ç–∞.
    –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 'command [text]', –≥–¥–µ command - —ç—Ç–æ save/get/clear
    """

    def get_name(self) -> str:
        return "memory"

    def get_description(self) -> str:
        return (
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –±–æ—Ç–∞. –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:\n"
            "‚Ä¢ get - –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ save <—Ç–µ–∫—Å—Ç> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç\n"
            "‚Ä¢ clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å"
        )

    async def handle(self, args: str, message: Message) -> str:
        user_id = message.from_user.id
        
        if not args:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (save/get/clear). –ù–∞–ø—Ä–∏–º–µ—Ä: memory save <—Ç–µ–∫—Å—Ç>"
        
        # Parse command and arguments
        parts = args.strip().split(maxsplit=1)
        command = parts[0].lower()
        context = parts[1] if len(parts) > 1 else ""

        # Simplify command parsing - remove all possible prefixes at once
        command = command.replace("memory_", "").replace("memory.", "").replace("memory ", "")
        
        try:
            if command == "save":
                if not context:
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: memory save <—Ç–µ–∫—Å—Ç>"
                if self.tools['database'].save_memory(user_id, context):
                    return "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
                return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
                
            elif command == "get":
                memories = self.tools['database'].get_memory(user_id)
                if memories:
                    return "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n---\n".join(memories)
                return "üì≠ –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞"
                
            elif command == "clear":
                if self.tools['database'].clear_memory(user_id):
                    return "üóë –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞"
                return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏"
            
            return (
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ memory save <—Ç–µ–∫—Å—Ç> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
                "‚Ä¢ memory get - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ\n"
                "‚Ä¢ memory clear - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å"
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ memory –∞–≥–µ–Ω—Ç–µ: {str(e)}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
